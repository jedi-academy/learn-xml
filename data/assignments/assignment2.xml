<?xml version="1.0" encoding="UTF-8"?>
<!--
Assignment 2 - Functional Webapp
-->
<lab status="beta">
    <!-- Activity metadata ... override anything from the course or organizer -->
    
    <!-- The meat of the presentation -->
    <slide title="Overall Assignment Goals" layout="normal">
        <p>The purpose of assignment 2 is to make your project functional,
            and to add admin maintenance to it.
            In a nutshell, you will be adding view flexibility, CRUD, and
            setting the stage for the game predictions.</p>
        <p>User authentication is not expected.</p>
        <p>Your assignment 1 project will need to have its database
            realized (not just mock data) and some of its usecases implemented
            (not just mock views).</p> 
        <p>This may sound suspiciously similar to labs #3-5! Hmmmmm.</p> 
    </slide>

    <slide title="FAQ? Revisions?" layout="normal">
        <p>If assignment details need clarifying, such changes will
            be made in this slide deck, and a note added to this page.</p>  
        <ul>
            <li></li>
        </ul>

    </slide>

    <slide title="Preparation" layout="normal">
        <p>Make sure that you create a "develop" branch in your shared
            repository, based on "master". Make this "develop" branch the default.
            This will let you continue work on assignment 2 without impacting
            your assignment 1 work, which has been preserved in the master branch.</p>
        <p>If there turn out to be issues with your assignment 1, those
            can be addressed in a "fix" branch, with a PR to the master branch.
            It will then need to be remerged into the develop branch.</p>
        <p>From this point on, all work is done on the develop branch, and it 
            will only get merged into the master branch when you have completed
            assignment 2.
            You are welcome to "tag" the master branch, perhaps "1.0",
            once you have isolated it. When you have completed the assignment,
            you would then merge your "develop" branch into the "master" branch,
            and tag the "master" branch "2.0".</p>
    </slide>

    <slide title="Submission" layout="normal">
        <p>When you are done, submit a readme or a comment to the D2L assignment dropbox, 
            with a link to your github repository.</p>
        <p>Due: Sunday Nov 15, 23:59 PST</p>
    </slide>

    <slide title="My Process" layout="normal">
        <p>To evaluate each project, I run a shell script using your repository name
            (so not including any .git extension), to pull your *master* branch
            into a marking folder I have setup, to launch a browser tab opened
            to your github repository, and a last browser tab opened to your
            webapp running on my system.</p>
        <p>Your repo does not have to be a NetBeans project. I can create
            a new one for it, using existing sources, as we
            have done in lab before.</p>
    </slide>
    <slide title="Your Database" layout="normal">
        <p>I expect your webapps to run as is, with the expectation that
            I may have to populate your database with the *one* SQL script I find in the root of your project,
            or in such place as you might notify me of in the readme that is part of your
            repo.</p>
        <p>An easy way to get this script is to export your database using PHPMyAdmin,
            checking the "gzipped" format to avoid potential hiccups with
            special characters in any of your table rows.
            In your SQL script, drop all tables you need before recreating them.
            Do not attempt to create a database, or to tie your script to a specific database.</p>
        <p>My testing assumes a "COMP4711" database, with default user "root" and no password.
            
            You can tailor *your* database config by having your own application/config/development
            subfolder on your local system, with over-riding database configuration
            settings. You would
            then "git ignore" that folder, so that it is not part of your repo, 
            and you aren't sharing
            your database username and password with me or the world.</p>
    </slide>
    <slide title="Sessions..." layout="normal">
        <p>Your webapp will need to use sessions, to store some mode toggles
            relevant to your app: the current roster order, the current roster layout,
            and whether editing is enabled.</p>
            <p>Session data can be stored using files, but using your database 
                might be safer, not having to worry about proper folder permssion settings.</p>
                <p>Read the Session library writeup, for details on your configuration 
                    and database needs.</p>
    </slide>
    <slide title="Your Repository" layout="normal">
        <p>Your repo should not include the CI3 pieces used for framework and 
            development, namely the tests and user_guide_src folders and the
            build/test scripts (composer.json, phpdoc.dist.xml, .travis.yml).
            You don't need the developer contribution files either (contributing.md and
            DCO.txt).</p>
        <p>Your repo should not include the system or user_guide folders eitherfolder. 
            Instead, your index.php 
            should set the SYSPATH to '../system3', which refers to a "system3" 
            folder at the same level as your repo.</p>
        <p>Hard-coding your SYSPATH, or using Windows-style separators, will
            break when I run your webapp locally. This results in a BOOM, and you
            know what that means!</p>
    </slide>

    <slide title="Evaluation" layout="normal">
        <p>Assignments will be evaluated out of 20, according to the following
            breakdown, which shows the relative importance or complexity
            of the gradable items:        </p>
        <div class="left">
            <ul>
                <li>Models, bound to DB tables (3)</li>
                <li>Homepage enhancements (-)</li>
                <li>Roster presentation (5)</li>
                <li>Player CRUD (5)</li>
                <li>League presentation (-)</li>
            </ul>
        </div>
        <div class="right">
            <ul>
                <li>Works properly? (3)</li>
                <li>Aesthetics &amp; consistency (2)</li>
                <li>Comments &amp; programming style (2)</li>
            </ul>
        </div>
    </slide>

    <slide title="Models" layout="normal">
        <p>Your webapp will have at least 2 tables in its database, for application
            data - one for players and one for league teams. 
            This does not count a session table, or any user/login table(s),
            if you are using those.</p>
        <p>I expect each table to have its own model, and you are welcome
            to use the base models provided in earlier labs as a starting point.
            Some of you have provided appropriate mock data, which can just be implemented
            as a table/model. Others will need to step up their game.</p>
    </slide>

    <slide title="Model Methods" layout="normal">
        <p>Each model should have additional methods, beyond CRUD, to
            support data extraction or manipulation for your usecases.
            This means that data filtering should be done in the models,
            and most of your "business logic" will probably
            end up inside them as well.</p>
        <p>A controller using one or more of your models might
            have to filter or validate parameters,
            but those would then be passed on to the appropriate
            model method for data extraction.</p>
    </slide>

    <slide title="Model Specifics" layout="normal">
        <p>
            <strong>Players</strong> - Your players table/model will need to track player
            data to support the presentation requirements. This means name (probably
            surname and first name, comma-separated), position, jersey number,
            filename of their mugshot, and any other data you have provided for already.</p>
        <p>
            <strong>League</strong> - Your league model needs to include *all* teams
            in the league, including their team name, city, conference, division,
            and filename of their logo image. 
            You are welcome to include other data you have provided for so far.
        </p>
        <p>
            <strong>History</strong> - You will need to model games history, so that you can
            predict the outcome of a game between your team and another.
            Don't worry about this until assignment 3, however.</p>
    </slide>
    <!--
        <slide title="Useful Prediction Data" layout="normal">
            <p>
                If you look at nhl.com, you will notice that each game has an
                identifier, yyyymmddnn, where "nn" is one of the games on a given day.</p>
            <p>If you look at the standings page there, you will notive a "net points"
                column, the difference between the points a team scored and the points scored
                against them; this is the basis for standings calculations.</p>
            <p>There are also some other columns, that you are welcome to include in
                your model but not required to (home vs away performance, performance
                inside a team's conference, current streak, and last 5 games summary).
            </p>
        </slide>
        <slide title="Final Model Thoughts" layout="normal">
            <p>
                You may want to provide for a configuration table of sorts,
                or perhaps for configuration settings...</p>
            <ul>
                <li>the last game # you retrieved</li>
                <li>the URL of the game scores service</li>
            </ul>
            <p>If you have nothing but time on your hands, you might even
                store predictions and compare them to actual games once
                played, with the intent of somehow profiting from
                this information to improve your predictions.
                On the other hand, this is only for fun, and not for profit,
                and I suspect you will have better uses for your time!</p>
        </slide>


    <slide title="Homepage Enhancements" layout="normal">
        <p>Provide a <strong>mock predictor</strong> on your homepage.</p>
        <p>Distinguish it from the rest of the hoimepage content by putting
            it inside a well or a fieldset.</p>
    <p>It should have a combo box to select your opponent, chosen
        from all of the *other* teams in the league.</p>
        <p>This can be a regular form, with a conventional "submit" button,
        to trigger redrawing the page, or you can use an A</p>
        <p>The predicted outcome (points for &amp; agaonst, can be randomly
            calculated chosen.</p>
                
    </slide>
    -->
    <slide title="ROSTER PRESENTATION" layout="normal">
        <p>This assignment involves three changes to the previous roster presentation:
            groups with pagination, flexible ordering, and flexible layout.</p>
        <p>Present your team's roster in <strong>groups with pagination</strong>.
            The roster should be presented twelve players at a time, starting with the
            first appropriate to the ordering currently in effect.
            Your team roster doesn't *have* to be complete, but I want you to have 
            at least 25 players in your roster.</p>
        <p>Provide for user-selectable <strong>roster order</strong>: name, 
            jersey, position. If you did not provide for these fields in assignment 1,
            it is definitely time to add them!</p>
        <p>Provide for user-selectable <strong>layout</strong> as a table or a gallery.</p>
    </slide>

    <slide title="Pagination Group Calculations" layout="normal">
        <p>You might use the pagination library from CodeIgniter for this, 
            or you can easily calculate 
            the page numbers yourself. 
            The number of players divided by 12 gives you the total number of  
            pages (don't forget to round up if not evenly divisible by 12).</p>     
        <p>Pagination implies a
            new method inside your roster controller, for instance <code>page</code>,
            whose purpose is to isolate the players that belong on the given
            page and pass that data to the approproate view components.</p>
        <p>The URL to display the second group of players might then look like 
            <code>myapp/roster/page/2</code>
        </p>
    </slide>
    
    <slide title="Pagination Controls" layout="normal">
        
        <p> The view will need pagination controls...</p>
        <ul>
            <li>"first" linked to page 1</li>
            <li>"previous" linked to the page # one lower than the current one</li>
            <li>"next" linked to the page # one higher than the current one</li>
            <li>"last" linked to the page # which would hold the last group</li>
        </ul>
        <p>These controls would normally be implemented by appropriate buttons.
            Bootstrap provides for pagination controls, hmmm.</p>

    </slide>

    <slide title="Roster Ordering" layout="normal">        
        <p> Your roster needs to be presented in any of several orders:
            name (surname then first name), jersey number, or position.</p>
        <p>Provide an <code>order</code> method in your roster controller, which
            takes a single parameter to denote the requested order.
            The roster data will need to be sorted in the correct order
            before extracting the players that belong on the current page,
            according to that order. The sorting could be done inside the controller
            (the <code>page</code>
            method), or inside the model.</p>
        <p>Store the current order as a session property, so it
            doesn't have to be passed as part of the URL, and make it obvious
            in the view which ordering is in effect.</p>
        <p>You could provide button icons to link to your ordering method,
            or you could provide a combobox to select the desired method. With
            the latter approach, a bit of javascript could trigger the
            request on any change, or you could have a "go" button to apply
            the effect.</p>
    </slide>
    
    <slide title="Roster Layout" layout="normal">        
        <p> Your roster needs to be presented in either table or gallery layout mode.</p>
        <p>Provide a <code>layout</code> method in your roster controller, which
            takes a single parameter to denote the requested layout.
        </p>
        <p>Store the current layout as a session property, so it
            doesn't have to be passed as part of the URL, and make it obvious
            in the view which layout is in effect.</p>
        <p>You could provide button icons to link to your layout selection method,
            or you could provide a combobox to select the desired layout. With
            the latter approach, a bit of javascript could trigger the
            request on any change, or you could have a "go" button to apply
            the effect.</p>

    </slide>
    
    <slide title="Roster Drilldown" layout="normal">        
        <p>
            <strong>Table</strong>
            layout presents the current roster page as an HTML table,
            without any imagery. <strong>Gallery</strong>
            layout should present the current roster page as rows of players.
            Show the player's mugshot (or thumbnail), name and jersey number.</p>
        <p>In both layouts, the player's name should be a link to a single
            player view (which you now need to provide), showing all the data you
            have for that player.</p>
    </slide>
    
    <slide title="PLAYER CRUD" layout="normal">
        <p>We want to provide for roster maintenance, but without being too
            obtrusive. </p>
        <p>Provide a button somewhere (navbar?) to toggle
            the current editing mode, which you should store as a session
            property. If editing is enabled, then you should provide an
            "Add player" button somewhere in the roster view, and when
            a single player view is presented, it should be ready for editing.
        </p>
        <p>If a player edit view is presented, you should have "Save", "Delete"
            and "Cancel" choices at the bottom of the form.</p>
    </slide>

    <slide title="CRUD Data Transfer Buffer" layout="normal">
        <p>You should use the data transfer buffer strategy. 
            If commencing the edit of a player, store their original record
            as a session property; if adding, create an empty player record
            and store it as a session property. </p>
        <p>The form would present the "current" state of the record, and
            submit changes. The updated record will need to be validated
            server-side ... if ok, add/update the model; if not ok, redisplay the
            record with error messages. if the user selects cancel, you should
            discard the session property for the record, and then display the roster
            again.</p>
            
    </slide>
    
    <slide title="CRUD Controller" layout="normal">
        <p>If you haven't gathered by now, it might be easier to implement
            this functionality with a separate controller, rather then trying to
            add to one of the existing ones.</p>
        <p>I suggest a controller named <code>Player</code>, with methods <code>add</code> (create an empty
            record and display it), <code>edit</code> (retrieve an existing record and display it),
            <code>post</code> (validate submitted data and update the database), and <code>delete</code> (remove
            a record from the table).</p>
            
    </slide>

    <slide title="Data Validation" layout="normal">
        <p>Some data validation is appropriate, both generally and specifically.</p>
        <p>Specific validation:</p>
        <ul>
            <li>if adding a new player, make sure that they will have a non-conflicting
                primary key</li>
            <li>don't allow two players to have the same jersey number</li>
            <li>make sure they have a name</li>
            <li>make sure that the chosen player position is valid</li>
            <li>... and what might be appropriate for any other fields you have provided</li>
        </ul>
        <p>The next slide addresses some general validation processes.</p>
    </slide>
    
    <slide title="Security" layout="normal">
        <p>General validation can get complicated, because of potential
            security exploits. CodeIgniter has a number of mechanisms built-in
            to help prevent exploits, but I suggest that you read the Input and Security
            library writeups in the CodeIgniter user guide.</p>
        <p>One common exploit is to attempt to embed javascript in input data,
            in the hope that it will be presented and executed when that data
            is displayed. PHP provides some functions to convert dangerous
            characters into their HTML entity, to prevent this. See htmlentities
            and tml_entity_decode.</p>
    </slide>

    <slide title="Image uploading" layout="normal">
        <p>CodeIgniter provides a file uploading library, to make it easier
            to upload images or other files.</p>
        <p>You will need to set the form type properly, and you will need
            to add some logic to move any uploaded file to the proper place,
            and to save its name in the appropriate record field.</p>
    </slide>

    <slide title="League Presentation" layout="normal">
        <p>You do not need to make changes to your league presentation
            as part of this assignment. I expect that your
            earlier work will show all the league teams.</p>
    </slide>
    <!--
        <slide title="League Presentation" layout="normal">
            <p>Layout by league, conference or division.</p>
            <p>Ordered by city, name, or standing</p>
        </slide>
    -->
    <slide title="Works properly?" layout="normal">
        <p>This basically refers to your webapp working as a webapp should.</p>
        <p>Things that would cost marks here include broken hyperlinks,
            broken images, CSS not loading properly,
            and of course BOOMs.</p>
    </slide>

    <slide title="Aesthetics &amp; Consistency" layout="normal">
        <p>Your webapp pieces should look and behave seamlessly.</p>
        <p>The different pages should have similar or compatible
            styles. Nothing should look like a ransom note!</p>
        <p>A note about style - some of the first assignments
            looked like repurposed image galleries, or repurposed
            quotation presenters. If this applies to your project,
            you really need to step up your game and make your
            webapp like like a fansite, rather than just give lip service
            to the task at hand!</p>
    </slide>

    <slide title="Comments &amp; programming style" layout="normal">
        <p>You are programmers, and you want to be professional. Code like it.</p>
        <p>That means clearly written and formatted code, properly commented.</p>
        <p>Your views should have no PHP in them, apart from possibly comments.</p>
        <p>Remember the golden rules!!!</p>
    </slide>

</lab>
