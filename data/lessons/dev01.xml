<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 02b - Devops Workflow
-->
<lesson status="alpha">
    <!-- Activity metadata ... override anything from the course or organizer -->

    <!-- Agenda -->

    <!-- Normal slides -->
    <slide title="Lesson Goals" layout="normal">
        <p>This short lesson introduces some project workflow techniques.</p>
        <p>
            <a href="https://www.atlassian.com/git/tutorials/comparing-workflows" target="_blank">
                Atlassian</a> has some great tutorials,
            and I am using some of their images here.
        </p>
        <p>Github itself has some handy guides, on the  
            <a href="https://guides.github.com/introduction/flow/index.htm" target="_blank">
                GitHub Flow</a>, for instance, and on  
            <a href="https://guides.github.com/activities/forking/" target="_blank">
                forking projects</a>.
        </p>
    </slide>

    <slide title="Centralized Workflow" layout="normal" tag="tag1">
        <div class="left">
            <p>With a centralized workflow, all the developers on a project
                share a central repository.</p>
            <p>They clone the repository locally, but they all publish
                changes to the shared repository.</p>
            <p>There is no locking or ownership, so this is problematic if someone else changes a file you are working on.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="800" height="406" src="/data/lessons/pix/2-21.png"/>
        </div>
    </slide>

    <slide title="Branching Workflow" layout="normal">
        <div class="left">
            <p>Following a branching workflow means that all feature development
                takes place in dedicated branches, other than "master".</p>
            <p>Once a feature is complete, its branch would then be merged
                into the "master" branch.</p>
            <p>Fixing an issue is considered a mini-feature, and would 
                be handled in its own (short-lived) branch.</p>
            <p>This is better than a centralized repository, but there can still be conflicts.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="800" height="219" src="/data/lessons/pix/2-22.png"/>
        </div>
    </slide>

    <slide title="Gitflow Workflow" layout="normal">
        <div class="left">
            <p>Gitflow workflow is a strict branching model convention.</p>
            <p>You have two main branches, "master" and "develop".
                The "master" branch is always release-ready, and is usually tagged
                with a release version number.</p>
            <p>All development is done on the "develop" branch, which is merged
                into the "master" branch to form a new release.
                If you only deploy from the "master" branch, conflicts don't affect it.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="800" height="323" src="/data/lessons/pix/2-23.png"/>
        </div>
    </slide>

    <slide title="Forking Workflow" layout="normal">
        <div class="left">
            <p>With the forking workflow, there is a main repository,
                and each developer "forks" it to make their
                own server-side repository, which is then cloned locally.</p>
            <p>Developers push code changes to their own repository,
                and trigger a pull request when they are ready to merge
                their changes into the official repository.</p>
            <p>Only the maintainer of the official repository can update it.
                They may include updates that break your repo, but that is "your"
                problem.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="800" height="444" src="/data/lessons/pix/2-24.png"/>
        </div>
    </slide>

    <slide title="Github Workflow" layout="normal">
        <div class="left">
            <ol>
                <li>Fork a github project</li>
                <li>Clone your fork locally</li>
                <li>Create a topic branch</li>
                <li>Commit changes to your branch</li>
                <li>Push your changes to your fork</li>
                <li>Send a pull request to the original project</li>
            </ol>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="537" height="400" src="/data/lessons/pix/2-25.png"/>
        </div>
    </slide>

    <slide title="Make Sure You Are Signing" layout="normal">
        <div class="left">
            <p>Many projects insist that submitted code be "signed", so they
                can be assured of the identity of the contributer.</p>
            <p>The first part of this is making sure that Git is
                configured with your name and email. This might be doable
                through your IDE, or you might have to use the command
                prompt, shown right.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="648" height="54" src="/data/tutorials/pix/2-1.png"/>
            <br/>
            <br/>
            <img class="scale" width="630" height="170" src="/data/tutorials/pix/2-2.png"/>
        </div>
    </slide>

    <slide title="Tell NetBeans to Add a Signoff" layout="normal">
        <div class="left">
            <p>In Tools/Options/Team, set the Git open to
                "Add Signed-off-by line to any commit message automatically.</p>
            <p> Many projects insist that submitted code be "signed", so they
                can be assured of the identity of the contributer.</p>
            <p>This signoff might be acceptable for many projects, but some 
                will insist that commits be "digitally signed". 
                <a href="http://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work" target="_blank">
                    This process</a> is more involved than you need for our purposes.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="600" height="407" src="/data/tutorials/pix/2-3.png"/>
        </div>
    </slide>

    <slide title="Fork Our Project" layout="normal">
        <div class="left">
            <p>On the Github website, fork the  repository you want
                to work with or contribute to.</p>
            <p></p>
        </div>
        <div class="right">
            <img class="scale" width="600" height="475" src="/data/tutorials/pix/2-4.png"/>
        </div>
    </slide>

    <slide title="Clone your fork locally" layout="normal">
        <div class="left">
            <p>You should remember this from last week :)</p>
        </div>
        <div class="right">
            <img class="scale" width="600" height="481" src="/data/tutorials/pix/2-5.png"/>
        </div>
    </slide>

    <slide title="Repository aliases" layout="normal">
        <div class="left">
            <p>You work locally with your repository clone.</p>
            <p>Your (forked) repository is given the alias "origin".</p>
            <p>The original repository should be given the alias
                "upstream", in case you need to sync with it.
                This might be easier to do from the command line.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="570" height="449" src="/data/lessons/pix/2-31.png"/>
        </div>
    </slide>

    <slide title="Create a topic branch" layout="normal">
        <div class="left">
            <p>Create a new branch, based on "master" or "develop", as appropriate, and check it out.</p>
            <p>If you forget the checkout, things will likely get messed up :(</p>            
        </div>
        <div class="right">
            <img class="scale" width="531" height="397" src="/data/tutorials/pix/2-6.png"/>
        </div>
    </slide>

    <slide title="Make and then commit changes to your branch" layout="normal">
        <div class="left">
            <p>Make whatever project changes you are responsible for.</p>
            <p>Commit your changes to your staging area after each group of
                related changes.</p>
            <p>Remember to make sure your commit is signed,
                and that it has an appropriate message.</p>
        </div>
        <div class="right">
            <img class="scale" width="600" height="516" src="/data/tutorials/pix/2-9.png"/>
        </div>
    </slide>

    <slide title="Synchronize Your Fork With the Main Repo" layout="normal">
        <div class="left">
            <p>If any changes are made to the shared repository (for instance
                by a fellow team member), you will need to synchronize
                your repository with it. If you haven't done so already, you will need to add the remote
                repository, and you should call it "upstream".</p>
            <p>You can then synchronize your repo by
                <ol>
                    <li>Checkout the "master" branch</li>
                    <li>git pull upstream master</li>
                    <li>git push origin master</li>
                    <li>Checkout your topic branch again.</li>
                </ol>
            </p>
        </div>
        <div class="right">
            <img class="scale" width="600" height="377" src="/data/tutorials/pix/2-14.png"/>
        </div>
    </slide>

    <slide title="Push your changes to your fork" layout="normal">
        <div class="left">
            <p>From your IDE, or the command line, push your changes to your 
                server-side repository, "origin".</p>
            <p>You should make sure you are in sync with the shared repository
                before doing this, or you run the risk of ending up with
                horrible conflicts.</p>
            <p>If you get a nasty message when synchronizinging, you will need to resolve
                any merge conflicts before continuing.</p>
        </div>
        <div class="right">
            <img class="scale" width="600" height="436" src="/data/tutorials/pix/2-10.png"/>
        </div>
    </slide>

    <slide title="Send a pull request to the original project" layout="normal">
        <div class="left">
            <p>If you switch to your github repository in your browser, you
                will see that github is offering to "compare &amp; pull request".</p>            
        </div>
        <div class="right">
            <img class="scale" width="600" height="330" src="/data/tutorials/pix/2-11.png"/>
        </div>
    </slide>

    <slide title="Initiate the Compare &amp; Pull Request" layout="normal">
        <div class="left">
            <p>Select the "Compare &amp; pull request" link.</p>
            <p>Near the top of the page, it should say that the pull
                request can be automaticaly merged. If it doesn't,
                you did something wrong, most likely forgetting
                to synhronize with the shared repository before pushing
                to your fork.</p>
            <p>Scroll down to the bottom of the page displayed, and make 
                sure that the changes are what you expect.</p>
            <p>If all looks ok, click "Create pull request".</p>
        </div>
        <div class="right">
            <img class="scale" width="600" height="412" src="/data/tutorials/pix/2-12.png"/>
        </div>
    </slide>

    <slide title="Wait For It..." layout="normal">
        <div class="left">
            <p>At this point, you should see the main repository,
                with your pull request center screen.</p>
            <p>You can comment on it, but you will have to wait for the repo
                maintainer to merge or reject your pull request.</p>
        </div>
        <div class="right">
            <img class="scale" width="600" height="403" src="/data/tutorials/pix/2-13.png"/>
        </div>
    </slide>

    <slide title="Are We Done Yet?" layout="normal">
        <p>Your pull request might get rejected for any number of reasons.
            You will get an email explaining the decision.</p>
        <p>Once your pull request has been merged, resynchronize
            with the "upstream" repo,
            and you can delete the topic branch on your github repo as well as
            locally.</p>
        <p>This probably sounds like a lot of work, but it will
            start to come naturally to you, and you will appreciate
            the wisdom of shared code management, and some of the steps
            here, once you have two or more developers sharing a repository!</p>
    </slide>

 
</lesson>
