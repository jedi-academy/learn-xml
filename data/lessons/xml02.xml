<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 08 - Constraining XML 
-->
<lesson status="beta">
    <!-- Activity metadata ... override anything from the course or organizer -->

    <slide title="XML Documents..." layout="normal" >
        <p>XML Documents contain a single root element, with child elements.</p>
        <p>Each element in an XML document can have a value, attributes, and 
            child elements.</p>
        <p>An XML document can be validated by checking it against a constraining
            specification.</p>
    </slide>

    <!-- Agenda -->
    <slide title="Agenda" layout="normal">
        <ol>
            <li>
                <a href="#{tag1}">Document Types</a>
            </li>
            <li>
                <a href="#{tag2}">DTD Mechanics</a>
            </li>
            <li>
                <a href="#{tag3}">XML Validation</a>
            </li>
            <li>
                <a href="#{tag4}">Other Techniques</a>
            </li>
        </ol>
    </slide>


    <!-- Normal slides -->

    <slide title="DOCUMENT TYPES" layout="normal" tag="tag1">
        <ul>
            <li>A Document Type Definition (DTD) describes the intended
                structure and rules for an XML document.</li>
            <li>An XML document is "bound" to a DTD through a 
                <code>&lt;!DOCTYPE ...&gt;</code>
                directive</li>
            <li>A document that claims to be of a certain type can be 
                checked against the DTD.</li>
            <li>This is a *simple* way of constraining an XML document,
                and not the only way.</li>
        </ul>
    </slide>

    <slide title="Document Type Declaration" layout="normal" >
        <ul>
            <li>A DTD defines the tags allowed inside an XML document,
                their order and nesting, and the attributes allowed for each.</li>
            <li>A DTD defines a markup language!</li>
            <li>A DTD can be inferred from an XML document, but not the other
                way around!</li>
        </ul>
    </slide>

    <slide title="Well-Formed vs Valid XML" layout="normal" >
        <ul>
            <li>A document that follows the rules of the XML grammar is well formed.</li>
            <li>A document that conforms to the document type definition is valid.</li>
            <li>The two concepts are related but different...
                an XML document has to be well-formed in order to work with it,
                while validity improves confidence in it.</li>
            <li>A document can be well formed without being valid - but not the converse.</li>
            <li>A document with no DTD has no concept of validity.</li>

        </ul>
    </slide>

    <slide title="Example: XML With Internal DTD" layout="normal" >
        <div class="left">
            <code>
&lt;?xml version="1.0"?&gt;<br/>
&lt;!DOCTYPE label[<br/>
&#160;&#160;&lt;!ELEMENT label (name, street, city,<br/>
&#160;&#160;&#160;&#160;state, country, code)&gt;<br/>
&#160;&#160;&lt;!ELEMENT name (#PCDATA)&gt;<br/>
&#160;&#160;&lt;!ELEMENT street (#PCDATA)&gt;<br/>
&#160;&#160;&lt;!ELEMENT city (#PCDATA)&gt;<br/>
&#160;&#160;&lt;!ELEMENT state (#PCDATA)&gt;<br/>
&#160;&#160;&lt;!ELEMENT country (#PCDATA)&gt;<br/>
&#160;&#160;&lt;!ELEMENT code (#PCDATA)&gt;<br/>
                ]&gt;<br/>
            </code>      
        </div>
        <div class="right">
            <code>
&lt;label&gt;<br/>
&#160;&#160;&lt;name&gt;Paul Allen&lt;/name&gt;<br/>
&#160;&#160;&lt;street&gt;Alaskan Way&lt;/street&gt;<br/>
&#160;&#160;&lt;city&gt;Seattle&lt;/city&gt;<br/>
&#160;&#160;&lt;state&gt;WA&lt;/state&gt;<br/>
&#160;&#160;&lt;country&gt;USA&lt;/country&gt;<br/>
&#160;&#160;&lt;code&gt;53251-0054&lt;/code&gt;<br/>
&lt;/label&gt;<br/>
            </code>
        </div>
    </slide>

    <slide title="Example: XML With External DTD" layout="normal" >
        <div class="left">
            <h2>garage.dtd:</h2>
            <code>
&lt;!ELEMENT GARAGESALE (DATE, TIME, PLACE, NOTES)&gt;<br/>
&lt;!ELEMENT DATE (#PCDATA)&gt;<br/>
&lt;!ELEMENT TIME (#PCDATA)&gt;<br/>
&lt;!ELEMENT PLACE (#PCDATA)&gt;<br/>
&lt;!ELEMENT NOTES (#PCDATA)&gt;
            </code>      
        </div>
        <div class="right">
            <h2>big_weekend.xml:</h2>
            <code>
&lt;?xml version="1.0"?&gt;<br/>
&lt;!DOCTYPE GARAGESALE SYSTEM "garage.dtd"&gt;<br/>
&lt;GARAGESALE&gt;<br/>
&#160;&#160;&lt;DATE&gt;March 6, 2002&lt;/DATE&gt;<br/>
&#160;&#160;&lt;TIME&gt;10:00 AM&lt;/TIME&gt;<br/>
&#160;&#160;&lt;PLACE&gt;GM Place&lt;/PLACE&gt;<br/>
&#160;&#160;&lt;NOTES&gt;Lots of old hockey sticks&lt;/NOTES&gt;<br/>
&lt;/GARAGESALE&gt; 
            </code>
        </div>
    </slide>

    <slide title="DTD MECHANICS" layout="normal" tag="tag2">
        <ul>
            <li>A DTD contains directives for elements and attribute lists.</li>
            <li>Collectively, these provide rules for the order,
                multiplicity &amp; content of components of an XML document.</li>
        </ul>
    </slide>

    <slide title="Element Declarations" layout="normal" >
        <ul>
            <li>Elements are declared using an ELEMENT directive:<br/>
                <code>&lt;!ELEMENT name (content)&gt;</code>
            </li>
            <li>"<code>name</code>" is the tag name of an element in the XML
                document. It follows XML naming conventions.</li>
            <li>"<code>content</code>" is basicaly a list of
                child elements for this one.</li>
        </ul>
    </slide>

    <slide title="Order Constraints" layout="normal" >
        <ul>
            <li>Child elements expected in a specific order are comma-separated:<br/>
                <code>&lt;!ELEMENT order (drink, food, dessert)&gt;</code>
            </li>
            <li>Child elements whose order does not matter are 
                vertical-bar-separated, using parentheses for precedence:<br/>
                <code>&lt;!ELEMENT order (drink, (food | dessert))&gt;</code>
            </li>
        </ul>
    </slide>

    <slide title="Multiplicity Constraints" layout="normal" >
        <ul>
            <li>Child element names without modifiers are required children:<br/>
                <code>&lt;!ELEMENT fullanme (firstname, initials, surname)&gt;</code>
            </li>
            <li>Child elements that are optional have a question mark modifier:<br/>
                <code>&lt;!ELEMENT fullanme (firstname, initials?, surname)&gt;</code>
            </li>
            <li>"Zero or more" child elements are denoted by an asterisk modifier:<br/>
                <code>&lt;!ELEMENT wishlist (gift*)&gt;</code>
            </li>
            <li>"One or more" child elements are denoted by a plus sign modifier:<br/>
                <code>&lt;!ELEMENT thought (idea+)&gt;</code>
            </li>
            <li>These can be used together:<br/>
                <code>&lt;!ELEMENT thought (idea|inkling)*&gt;</code>
            </li>
        </ul>
    </slide>

    <slide title="Content Constraints" layout="normal" >
        <ul>
            <li>An element without children or text value is denoted EMPTY:<br/>
                <code>&lt;!ELEMENT brain EMPTY&gt;</code>
            </li>
            <li>An element containg a value but no children is designated 
                #PCDATA (for parsed character data):<br/>
                <code>&lt;!ELEMENT title (#PCDATA)&gt;</code>
            </li>
            <li>The "ANY" designation is for an element that can have any number and order 
                of children, so long as their names are defined in the DTD.:<br/>
                <code>&lt;!ELEMENT wishlist (ANY)&gt;</code>
            </li>
            <li>An element which can contain text as well as nested child elements
                is called "mixed":<br/>
                <code>&lt;!ELEMENT story (#PCDATA|para)*&gt;</code>
            </li>           
        </ul>
    </slide>

    <slide title="Attribute Declarations" layout="normal" >
        <ul>
            <li>Attributes are declared using an ATTLIST directive:<br/>
                <code>&lt;!ATTLIST element-name [name, type, modifier]+&gt;</code>
            </li>
            <li>Sample attribute declarations:<br/>
                <code>&lt;!ATTLIST category
                    code    CDATA   #REQUIRED&gt;<br/>
    &lt;!ATTLIST quarter
                    number  (1|2|3|4)   #REQUIRED
                    year    CDATA   #REQUIRED
&gt;
                    <br/>
    &lt;!ATTLIST quarter<br/>
&#160;&#160;number  (1|2|3|4)   #REQUIRED<br/>
&#160;&#160;year    CDATA   #REQUIRED<br/>
&gt;
                </code>
            </li>
            <li>Attributes can be defined &amp; specified in XML document 
                in any order.</li>
            <li>First use in XML sticks, others ignored</li>
        </ul>
    </slide>

    <slide title="Attribute Types" layout="normal" >
        <ul>
            <li>An attribute whose value is a text string is denoted as CDATA:<br/>
                <code>&lt;!ATTLIST name title CDATA #REQUIRED&gt;</code>
            </li>
            <li>An attribute can have an enumeration of allowed values:<br/>
                <code>&lt;!ATTLIST name title (mr|mrs|dr) #REQUIRED&gt;</code>
                <br/>
                These are separated by vertical bars, and cannot contain spaces.
            </li>
        </ul>
    </slide>

    <slide title="Attribute Modifiers" layout="normal" >
        <ul>
            <li>An attribute which is required for an element in the XML
                document has a modifier of "#REQUIRED":<br/>
                <code>&lt;!ATTLIST name title CDATA #REQUIRED&gt;</code>
            </li>
            <li>An attribute which is optional has a modifier of "#IMPLIED":<br/>
                <code>&lt;!ATTLIST name title CDATA #IMPLIED&gt;</code>
            </li>
            <li>An attribute with a default value has that default value inside quotes:<br/>
                <code>&lt;!ATTLIST name title CDATA "Mr"&gt;</code>
            </li>
        </ul>
    </slide>

    <slide title="Attribute ID Notes" layout="normal" >
        <p>There are some additional attribute types, though seldom used
            because there are other, better techniques to
            address their intended purpose.</p>
        <ul>
            <li>A <code>NMTOKEN</code> attribute has a value which
                contains only letters, digits, hyphen, point, underscore, and colon; 
            the value has to 
                start with a letter</li>
                <li>An <code>ID</code> attribute is one which is a 
                <code>NMTOKEN</code> and whose value has to be unique amongst 
                all <code>ID</code> attributes in the document</li>
                <li>An <code>IDREF</code> attribute is one whose value is meant
                to reference an <code>ID</code> somewhere in the document</li>
        </ul>
    </slide>


    <slide title="XML VALIDATION" layout="normal" tag="tag3">
        <ul>
            <li>A DTD can be validated inside NetBeans, by right-clicking
                inside its editor panel and choosing "Check DTD".</li>
            <li>An XML document with a document type can be
                validated inside NetBeans‏, by right-clicking
                inside its editor panel and choosing "Validate XML".</li>
            <li>An XML document without a document type cannot be
                validated, but its well-formedness can be checked inside 
                NetBeans‏, by right-clicking
                inside its editor panel and choosing "Check XML".</li>
        </ul>
    </slide>

    <slide title="Server-Side Validation (Short Story)" layout="normal" >
        <p>An XML document can also be validated server-side,
        programmatically. The folllowing shows the general idea.</p>
        <code>
$doc = new DOMDocument();<br/>
$doc-&gt;validateOnParse = true;<br/>
$doc-&gt;load('abc.xml');            
        </code>
        <p>Returns TRUE if valid, FALSE otherwise</p>
    </slide>

    <slide title="Server-Side Validation (Long Story)" layout="normal" >
        <p>More proper server-side validation, with error-checking:</p>
        <code>
libxml_use_internal_errors(true);<br/>
if ($doc-&gt;validate())<br/>
&#160;&#160;return 'DTD validated ok';<br/>
else {<br/>
&#160;&#160;$result = "&lt;b&gt;Oh nooooo...&lt;/b&gt;&lt;br/&gt;";<br/>
&#160;&#160;foreach (libxml_get_errors() as $error) {<br/>
&#160;&#160;&#160;&#160;$result .= $error-&gt;message . '&lt;br/&gt;';<br/>
&#160;&#160;}<br/>
&#160;&#160;libxml_clear_errors(); // clear the error message buffer<br/>
&#160;&#160;return $result;<br/>
}       
        </code>
    </slide>

   <slide title="OTHER TECHNIQUES" layout="normal" tag="tag4">
        <ul>
            <li>DTDs are simple, widespread, and limited.</li>
            <li>They are generally considered obsolete, being replaced by schemas.</li>
            <li>But they are so simple, while schemas have a much steeper
            learning curve.</li>
        </ul>
    </slide>

    <slide title="Sample Schema Exceprt" layout="normal" >
             <p>Here is one part of a schema, only defining a country data type,
            which could be an element or an alttribute.</p>
            <code>
    &lt;!-- There are three countries in our data set.<br/>
    It makes sense to restrict a country type to one<br/>
    of that list. We can add to the list later if North America grows. <br/>
    Note that we will have to capitalize these later for reporting. --&gt;<br/>
    &lt;xs:simpleType name="Tcountry"&gt;<br/>
&#160;&#160;&lt;xs:restriction base="xs:string"&gt;    <br/>
&#160;&#160;&#160;&#160;&lt;xs:enumeration value="canada"/&gt;<br/>
&#160;&#160;&#160;&#160;&lt;xs:enumeration value="mexico"/&gt;<br/>
&#160;&#160;&#160;&#160;&lt;xs:enumeration value="usa"/&gt;<br/>
&#160;&#160;&lt;/xs:restriction&gt;    <br/>
    &lt;/xs:simpleType&gt;
               
            </code>
    </slide>

    <slide title="Sample Relax NG Exceprt" layout="normal" >
             <p>Here is one part of a Relax NG schema....</p>
            <code>
&lt;element name="addressBook" xmlns="http://relaxng.org/ns/structure/1.0"&gt; <br/>
&#160;&#160;&lt;oneOrMore&gt; <br/>
&#160;&#160;&#160;&#160;&lt;element name="card"&gt; <br/>
&#160;&#160;&#160;&#160;&#160;&#160;&lt;element name="name"&gt; <br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;text/&gt; <br/>
&#160;&#160;&#160;&#160;&#160;&#160;&lt;/element&gt; <br/>
&#160;&#160;&#160;&#160;&#160;&#160;&lt;element name="email"&gt; <br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;text/&gt; <br/>
&#160;&#160;&#160;&#160;&#160;&#160;&lt;/element&gt; <br/>
&#160;&#160;&#160;&#160;&lt;/element&gt; <br/>
&#160;&#160;&lt;/oneOrMore&gt; <br/>
&lt;/element&gt;                
            </code>
    </slide>

</lesson>
