<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 09- Processing XML 
-->
<lesson status="beta">
    <!-- Activity metadata ... override anything from the course or organizer -->

    <slide title="XML ..." layout="normal" >
        <p>XML documents are loaded into an in-memory tree
            structure, the DOM.</p>
        <p>The tree needs to be navigated, and we need
            to access or manipulate the value and/or attributes
            of an element, as well as possibly its children.</p>
        <p>We will use the PHP-DOM and SimpleXML libraries
            built into PHP for this.</p>
    </slide>

    <!-- Agenda -->
    <slide title="Agenda" layout="normal">
        <ol>
            <li>
                <a href="#{tag1}">Document Object Model</a>
            </li>
            <li>
                <a href="#{tag2}">DOM API</a>
            </li>
            <li>
                <a href="#{tag3}">Support for XML</a>
            </li>
            <li>
                <a href="#{tag4}">PHP-DOM</a>
            </li>
            <li>
                <a href="#{tag5}">SimpleXML</a>
            </li>
            <li>
                <a href="#{tag6}">XML Models</a>
            </li>
        </ol>
    </slide>


    <!-- Normal slides -->

    <slide title="DOCUMENT OBJECT MODEL" layout="normal" tag="tag1">
        <div class="left">
            <ul>
                <li>The <a href="http://www.w3.org/DOM/" target="_blank">
                        Document Object Model</a> (DOM) comes from the
                    <a href="http://www.w3.org/" target="_blank">World Wide Web Consortium</a> (W3C).</li>
                <li>It is a platform- and language-neutral interface that will allow 
                    programs and scripts to dynamically access/traverse and 
                    update the content and structure of documents.  </li>
            </ul>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="600" height="409" src="/data/lessons/pix/9-08.png"/>
        </div>    
    </slide>

    <slide title="DOM Applicability" layout="normal" >
        <div class="left">
            <ul>
                <li>The Document Object Model (DOM) is an API for accessing
                    and manipulating XML, XHTML and even HTML documents.</li>
                <li>It provides a node abstraction, for tree traversal, and
                    an element abstraction, for the values, attributes and
                    children of each element in an XML document.</li>
            </ul>
        </div>
        <div class="right">
            <p>Sample DOM tree for an HTML document:</p>
            <img class="scale" width="428" height="443" src="/data/lessons/pix/9-05.png"/>
        </div>    
    </slide>

    <slide title="DOM Evolution" layout="normal" >
        <div class="left">
            <p>The DOM is a "living standard"</p>
            <ul>
                <li>DOM Level 1 (1998) is a complete model</li>
                <li>DOM Level 2 (2000) added events and namespace support</li>
                <li>DOM Level 3 (2004) added xpath and serializing as XML</li>
                <li>DOM Level 4 (2014) is in progress, eg TreeWalker</li>
            </ul>
            <p>What else? XML Schema, XSLT, XLink, xml:id, XInclude, XPointer, XForms</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="640" height="440" src="/data/lessons/pix/9-03.png"/>
        </div>    
    </slide>

    <slide title="Nodes Versus Elements" layout="normal" >
        <div class="left">
            <p>Nodes:</p>
            <ul>
                <li>"Identity"
                    <ul>
                        <li>Name of the node</li>
                        <li>Some nodes don't really have name</li>
                    </ul>
                </li>
                <li>State
                    <ul>
                        <li>What does this node contain?</li>
                    </ul>
                </li>
                <li>Behaviour
                    <ul>
                        <li>The afore-mentioned methods for tree traversal</li>
                    </ul>
                </li>
            </ul>
        </div>
        <div class="right">
            <p>Elements:</p>
            <ul>
                <li>"Identity"
                    <ul>
                        <li>Name of the element</li>
                    </ul>
                </li>
                <li>State
                    <ul>
                        <li>Value, attributes, children</li>
                    </ul>
                </li>
                <li>Behaviour
                    <ul>
                        <li>Nodes methods + property manipulation</li>
                    </ul>
                </li>
            </ul>
        </div>    
    </slide>

    <slide title="DOM API" layout="normal" tag="tag2">
        <div class="left">
            <p>The DOM API provides a number of standard encapsulations
                for a DOM tree, shown right.</p>
            <p>These are interfaces, and prescribe behaviours.</p>
        </div>
        <div class="right">
            <img class="scale" width="472" height="600" src="/data/lessons/pix/9-04.png"/>
        </div>    
    </slide>

    <slide title="DOM API Extended" layout="normal" >
        <div class="left">
            <p>The DOM API can be extended to handle
                different kinds of related documents.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="566" height="357" src="/data/lessons/pix/9-06.png"/>
        </div>    
    </slide>

    <slide title="Some DOM API Details" layout="normal" >
        <table border="1">
            <tr>
                <th>DOM Interface</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>Document</td>
                <td>XML document top-level node, which provides access to all 
                    the other nodes, including the root element</td>
            </tr>
            <tr>
                <td>Node</td>
                <td>Represents any node in the DOM tree</td>
            </tr>
            <tr>
                <td>NodeList</td>
                <td>A read-only list of Node objects</td>
            </tr>
            <tr>
                <td>Element</td>
                <td>Derives from node &amp; represents an element node</td>
            </tr>
            <tr>
                <td>Attr</td>
                <td>Derives from node &amp; represents an attribute node</td>
            </tr>
            <tr>
                <td>CharacterData</td>
                <td>Derives from node &amp; represents character data</td>
            </tr>
            <tr>
                <td>Text</td>
                <td>Derives from CharacterData &amp; represents a text node</td>
            </tr>
            <tr>
                <td>Comment</td>
                <td>Derives from CharacterData &amp; represents a comment node</td>
            </tr>
            <tr>
                <td>ProcessingInstruction</td>
                <td>Derives from node &amp; represents a processing instruction</td>
            </tr>
            <tr>
                <td>CDATASection</td>
                <td>Derives from text &amp; represents a CDATA section</td>
            </tr>
        </table>
    </slide>

    <slide title="DOM Report Card" layout="normal" >
        <div class="left">
            <p>Strengths:</p>
            <ul>
                <li>Tree structure easy to use</li>
                <li>Entire content of document available in memory</li>
                <li>Can find any node "easily"</li>
                <li>Knowledge transferable from one language to another</li>
            </ul>
        </div>
        <div class="right">
            <p>Weaknesses:</p>
            <ul>
                <li>Memory hog for large documents (whole document loaded)‚Äè</li>
                <li>Doesn't use all features of all languages</li>
                <li>DOM has no "cursor"</li>
                <li>Complex set of rules about getting value on a node</li>
                <li>Interfaces only</li>
            </ul>
        </div>    
    </slide>

    <slide title="DOM Alternatives" layout="normal" >
        <p>Using the DOM API is not the only way to process XML documents.</p>
        <ul>
            <li>
                <a href="http://www.saxproject.org/" target="_blank">Simple API 
                    for XML</a> (SAX) provides event driven processing
                of an XML document read as a stream.</li>
            <li>
                <a href="https://jcp.org/en/jsr/detail?id=173" target="_blank">
                    Streaming API for XML</a> (StAX) is half-way between DOM and 
                SAX, allowing an application to "pull" content from an XML 
                document as needed.</li>
            <li>
                <a href="http://www.rpbourret.com/xml/XMLDataBinding.htm" target="_blank">
                    XML data binding</a> treats an XML document as a programming 
                language object. This is the approach of SimpleXML.</li>
            <li>
                <a href="http://www.w3.org/Style/XSL/" target="_blank">
                    Extensible Stylesheet Language Transformations</a> (XSLT) 
                is a language/tool for transforming XML
                documents into other formats, for instance HTML pages or PDF files.</li>
            <li>
                <a href="http://www.w3.org/standards/xml/processing.html" target="_blank">
                    XML Pipelines</a> (XProc) provides for applying multiple 
                processing steps, using different tools, in order.</li>
        </ul>
    </slide>

    <slide title="SUPPORT FOR XML" layout="normal" tag="tag3">
        <div class="left">
            <ul>
                <li>XML is supported in almost all programming languages.</li>
                <li>Most reference implementations are in Java.</li>
                <li>Enterprise employers will assume you "get" the DOM API,
                    and that you are proficient with Java or SAX.</li>
            </ul>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="600" height="399" src="/data/lessons/pix/9-09-northwestern.edu.png"/>
        </div>    
    </slide>

    <slide title="XML in Java" layout="normal">
        <p>XML support ... pretty much defined by Java</p>
        <div class="left">
            <ul>
                <li>org.w3c.dom - Core DOM interfaces ‚Äì tree structure</li>
                <li>org.w3c.sax - Core SAX interfaces ‚Äì parsing events</li>
                <li>javax.xml - Bind, crypto, datatype, namespace, parsers, 
                    soap, stream, transform, validation, ws, xpath</li>
                <li>javax.xml (JEE) - remote procedure calls‚Äè</li>
                <li>Other... JDOM (concrete classes &amp; collections)</li>
            </ul>
        </div>
        <div class="right">
            <img class="scale" width="450" height="485" src="/data/lessons/pix/9-10-Java_Duke_learning.png"/>
        </div>    
    </slide>

    <slide title="XML in PHP" layout="normal">
        <div class="left">
            <p>The commonly used libraries:</p>
            <ul>
                <li>
                    <a href="http://php.net/manual/en/book.dom.php" target="_blank">PHP-DOM</a> 
                    - concrete implementation of W3C interfaces</li>
                <li>
                    <a href="http://php.net/manual/en/book.simplexml.php" target="_blank">SimpleXML</a> 
                    - XML data binding</li>
                <li>
                    <a href="http://php.net/manual/en/book.libxml.php" target="_blank">libxml</a> 
                    - interface to the system XML resource</li>
                <li>NOTE: Both PHP-DOM and SimpleXML are wrappers for the underlying
                    libxml resource. They refer to the same thing, and can be used
                    in a mix and match fashion, as you will see shortly.</li>
            </ul>
        </div>
        <div class="right">
            <p>Experimental or stale libraries:</p>
            <ul>
                <li>
                    <a href="http://php.net/manual/en/book.xsl.php" target="_blank">PHP-XSL</a> - XSLT wrapper; stale but usable</li>
                <li>
                    <a href="http://php.net/manual/en/book.xml.php" target="_blank">XMLParser</a>, 
                    <a href="http://php.net/manual/en/book.xmlreader.php" target="_blank">XMLReader</a>, 
                    <a href="http://php.net/manual/en/book.xmlwriter.php" target="_blank">XMLWriter</a> 
                    - streaming API</li>
                <li>
                    <a href="http://php.net/manual/en/book.sdo.php" target="_blank">Service Data Objects</a>
                    (SDO) - another streaming API</li>
            </ul>
        </div>    
    </slide>

    <slide title="USING PHP-DOM" layout="normal" tag="tag4">
        <div class="left">
            <ul>
                <li>There are a number of classes in the PHP-DOM library,
                    some of which are shown to the right.</li>
                <li>These are concrete classes, corresponding to but
                    not implementing the W3C DOM API.</li>
                <li>The next few slides highlight the pieces we will
                    exploit. For a more comprehensive look at PHP-DOM, 
                    check the PHP  manual.</li>
            </ul>
        </div>
        <div class="right">
            <p>Some of the PHP-DOM classes:</p>
            <ul>
                <li>DOMAttr</li>
                <li>DOMCharacterData</li>
                <li>DOMDocument</li>
                <li>DOMElement</li>
                <li>DOMEntity<br/>...</li>
                <li>DOMNode<br/>...</li>
                <li>DOMXPath</li>
            </ul>
        </div>    
    </slide>

    <slide title="DOMDocument" layout="normal">
        <div class="left">
            <p>The DOMDocument class is the starting point
                for working with an XML document using this
                library. Some of its methods are shown below, and a small sample 
                to the right.</p>
            <ul>
                <li>load, loadXML</li>
                <li>
                    <strong>save, saveXML</strong>
                </li>
                <li>createElement/Attribute/...</li>
                <li>getElementByIDd/TagName</li>
                <li>validate, schemaValidate</li>
            </ul>
        </div>
        <div class="right">
            <p>A simple DOMDocument example:</p>
            <code>
                $xmlDoc = new DOMDocument();<br/>
                $xmlDoc-&gt;load("note.xml");<br/>
                <br/>
                print $xmlDoc-&gt;saveXML();<br/>
            </code>
        </div>    
    </slide>

    <slide title="DOMNode" layout="normal">
        <div class="left">
            <p>The DOMNode class is the encapsulation of a treenode
                in the DOM tree constructed from an XML document.</p>
            <p>The more useful methods are shown below, with an example to the right.</p>
            <ul>
                <li>
                    <strong>append/remove/replace child</strong>
                </li>
                <li>insertBefore</li>
                <li>normalize</li>
                <li>hasChildren, hasAttributes</li>
            </ul>
        </div>
        <div class="right">
            <p>A simple DOMNode example, using one of its properties:</p>
            <code>
                $xmlDoc = new DOMDocument();<br/>
                $xmlDoc-&gt;load("note.xml");<br/>
                <br/>
                $x = $xmlDoc-&gt;documentElement;<br/>
                foreach ($x-&gt;childNodes AS $item) {<br/>
&#160;&#160;print $item-&gt;nodeName . " = " . <br/>
&#160;&#160;&#160;&#160;$item-&gt;nodeValue . "&lt;br/&gt;";<br/>
                }
            </code>
        </div>    
    </slide>

    <slide title="DOMElement" layout="normal">
        <div class="left">
            <p>The DOMElement class is the encapsulation of an element
                in an XML document. It extends DOMNode.</p>
            <p>The more useful methods are shown below, with an example to the right.</p>
            <ul>
                <li>get/set/remove/has attribute</li>
            </ul>
        </div>
        <div class="right">
            <p>A simple DOMElement example:</p>
            <code>
                $xmlDoc = new DOMDocument();<br/>
                $xmlDoc-&gt;load("note.xml");<br/>
                <br/>
                $x = $xmlDoc-&gt;documentElement;<br/>
                foreach ($x-&gt;childNodes AS $item) {<br/>
&#160;&#160;print $item-&gt;nodeName . " has ID " . <br/>
&#160;&#160;&#160;&#160;$item-&gt;getAttribute('id') . "&lt;br/&gt;";<br/>
                }
            </code>
        </div>    
    </slide>

    <slide title="USING SIMPLEXML" layout="normal" tag="tag5">
        <ul>
            <li>SimpleXML provides a data binding for XML elements in
                the DOM tree built by libxml. A SimpleXMLElement object
                encapsulates the XML element in question, as well as its
                child elements.</li>
            <li>Depending on the context, SimpleXMLElements can be
                treated as objects or arrays, and as iterable and indexable. 
            </li>
            <li>SimpleXML includes two classes, SimpleXMLElement and
                SimpleIterator, and three functions. That's it!</li>
        </ul>
    </slide>

    <slide title="SimpleXML Objects" layout="normal">
        <div class="left">
            <p>Treated as an object, a number of methods are provided.</p>
            <p>For the most part, these return results as SimpleXMLElements
                too</p>
            <p>A simple example is shown to the right.
                It also uses one of the SimpleXML functions to load an XML
                document and return its root element.</p>
        </div>
        <div class="right">
            <p>Code snippet:</p>
            <code>
                $xml = simplexml_load_file('customers.xml');<br/>
                foreach ($xml-&gt;children() as $customer) {<br/>
&#160;&#160;$count++;<br/>
                }
            </code>
        </div>    
    </slide>

    <slide title="SimpleXML Objects as Objects" layout="normal">
        <div class="left">
            <p>Treated as an object, the child elements of a SimpleXMLElement
                are exposed as properties.</p>
            <p> You may need to cast returned values, for instance if you want
                to use the value of a child element as an array index.</p>
            <p>A child element can be added to a SimpleXMLElement by
                assigning a value to it.</p>
            <p>A simple example is shown to the right.</p>
        </div>
        <div class="right">
            <p>Code snippet:</p>
            <code>
                $xml = simplexml_load_file('customers.xml');<br/>
                foreach ($xml-&gt;children() as $customer) {<br/>
&#160;&#160;$sales = (float) $customer-&gt;sales;<br/>
&#160;&#160;$totalsales += $sales;<br/>
&#160;&#160;$name = (string) $customer-&gt;name;<br/>
&#160;&#160;$altsales[$name] = $sales<br/>
&#160;&#160;if ($sales &gt; 1000000)<br/>
&#160;&#160;&#160;&#160;$customer-&gt;rep = 'Me!';<br/>
                }
            </code>
        </div>    
    </slide>

    <slide title="SimpleXML Objects as Arrays" layout="normal">
        <div class="left">
            <p>The attributes of an XML element are accessed by treating the
                SimpleXMLElement reference as an array.</p>
            <p>Attributes can be set by assigning a value to the array element.</p>
            <p>A simple example is shown to the right.</p>
        </div>
        <div class="right">
            <p>Code snippet:</p>
            <code>
                $xml = simplexml_load_file('customers.xml');<br/>
                foreach ($xml-&gt;children() as $customer) {<br/>
&#160;&#160;$id = (string) $customer['id']<br/>
&#160;&#160;if ($id &gt; 1000)<br/>
&#160;&#160;&#160;&#160;$customer['province'] = 'BC';<br/>
                }
            </code>
        </div>    
    </slide>

    <slide title="SimpleXML Objects as Iterables" layout="normal">
        <div class="left">
            <p>A SimpleXMLElement is iterable. You saw that earlier but might not have
                realized it, with the children() method, which returns a 
                SimpleXMLElement.</p>
            <p>See the simple example to the right.</p>
        </div>
        <div class="right">
            <p>Code snippet:</p>
            <code>
                $xml = simplexml_load_file('customers.xml');<br/>
                foreach ($xml-&gt;children() as $customer) {<br/>
&#160;&#160;$sales = (float) $customer-&gt;sales;<br/>
&#160;&#160;$totalsales += $sales;<br/>
                }<br/>
                // Alternate - for only the "customer" children<br/>
                foreach ($xml-&gt;customer as $one) <br/>
&#160;&#160;$totalsales += (float) $one-&gt;sales;
            </code>
        </div>    
    </slide>

    <slide title="SimpleXML Objects as Indexables" layout="normal">
        <div class="left">
            <p>A SimpleXMLElement can be indexable, if appropriate.
                If it is iterable, you can reference specific elements
                within the iteration using a numeric array notation.</p>
            <p>See the simple example to the right.</p>
        </div>
        <div class="right">
            <p>Code snippet:</p>
            <code>
                $xml = simplexml_load_file('customers.xml');<br/>
                // Let's add the sales for the 2nd and 5th customers<br/>
                $totalsales += (float) $xml-&gt;customer[1]-&gt;sales;<br/>
                $totalsales += (float) $xml-&gt;customer[4]-&gt;sales;<br/>
            </code>
        </div>    
    </slide>
    
    <slide title="SimpleXML Methods" layout="normal">
        <p>Here is a list of the most common SimpleXMLElement
            methods, with their return type shown.</p>
        <table border="1">
            <tr>
                <th>Method</th>
                <th>Returns</th>
            </tr>
            <tr>
                <td>addAttribute(name,value)</td>
                <td>void</td>
            </tr>
            <tr>
                <td>addChild(name,value)</td>
                <td>SimpleXMLElement</td>
            </tr>
            <tr>
                <td>asXML() or asXML(filename)</td>
                <td>string or TRUE/FALSE</td>
            </tr>
            <tr>
                <td>attributes()</td>
                <td>SimpleXMLElement</td>
            </tr>
            <tr>
                <td>children()</td>
                <td>SimpleXMLElement</td>
            </tr>
            <tr>
                <td>count()</td>
                <td>int</td>
            </tr>
            <tr>
                <td>getName()</td>
                <td>string</td>
            </tr>
            <tr>
                <td>xpath(expression)</td>
                <td>SimpleXMLElement[]</td>
            </tr>
        </table>
    </slide>
    
    <slide title="SimpleXML Bigger Example" layout="normal">
        <div class="left">
            <p>movies.xml:</p>
            <code>
&lt;movies&gt;<br/>
&#160;&#160;&lt;movie&gt;<br/>
&#160;&#160;&#160;&#160;&lt;title&gt;PHP: Behind the Parser&lt;/title&gt;<br/>
&#160;&#160;&#160;&#160;&lt;characters&gt;<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&lt;character&gt;<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;name&gt;Ms. Coder&lt;/name&gt;<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;actor&gt;Onlivia Actora&lt;/actor&gt;<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&lt;/character&gt;<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&lt;character&gt;<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;name&gt;Mr. Coder&lt;/name&gt;<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;actor&gt;El Act&#211;r&lt;/actor&gt;<br/>
&#160;&#160;&#160;&#160;&#160;&#160;&lt;/character&gt;<br/>
&#160;&#160;&#160;&#160;&lt;/characters&gt;<br/>
&#160;&#160;&lt;/movie&gt;<br/>
&lt;/movies&gt;
            </code>
        </div>
        <div class="right">
            <p>Code snippet:</p>
            <code>
                $xml = new SimpleXMLElement($xmlstr);<br/>
                // pick a movie<br/>
                $choice = rand($xml-&gt;count();<br/>
                // add a new child<br/>
                $character = $xml-&gt;movie[$choice]-&gt;characters-&gt;addChild('character');<br/>
                $character-&gt;addChild('name', 'Mr. Parser');<br/>
                $character-&gt;addChild('actor', 'John Doe');<br/>
                // add another child, with attribute<br/>
                $rating = $xml-&gt;movie[$choice]-&gt;addChild('rating', 'PG');<br/>
                $rating-&gt;addAttribute('type', 'mpaa');
            </code>
        </div>    
    </slide>
    
    <slide title="Deleting With SimpleXML" layout="normal">
        <div class="left">
            <p>It is possible to add children or attributes,
                without using the object methods.</p>
            <p>It is also possible to remove a child or an attribute,
                though not quite as straightforward.</p>
            <p>See the simple example to the right.</p>
            <p>You still need to save the XML document to persist any changes.</p>
        </div>
        <div class="right">
            <p>Code snippet:</p>
            <code>
                $xml = ...<br/>
                $xml-&gt;newfield = 'sdfsdf'; // add new child<br/>
                $xml-&gt;newfield['abc'] = 'def'; // add new attribute<br/>
                <br/>
                unset $xml-&gt;field['aaa']; // deletes attribute<br/>
                unset $xml-&gt;field; // deletes child            
            </code>
        </div>    
    </slide>

    <slide title="SimpleXML and PHPDOM Together" layout="normal">
        <div class="left">
            <p>SimpleXML lets you traverse a DOM, gives elements as object 
                properties &amp; attributes as object array elements,
                but you can't easily delete stuff.</p>
            <p>But you can switch to PHP-DOM when you need these :))</p>
            <p>See the simple example to the right.</p>
        </div>
        <div class="right">
            <p>Code snippet:</p>
            <code>
                $xml = ‚Ä¶<br/>
                $element = ‚Ä¶<br/>
                <br/>
                // delete an element in a SimpleXML doc<br/>
                $dom_element = dom_import_simplexml($element);<br/>
                $dom_parent = $dom_element-&gt;parentNode;<br/>
                $dom_parent-&gt;removeChild($dom_element);
            </code>
        </div>    
    </slide>

    <slide title="Saving SimpleXML Formatted" layout="normal">
        <div class="left">
            <p>Here is another example, showing a good use of both
                of the XML Packages.</p>
            <p>See the simple example to the right.</p>
        </div>
        <div class="right">
            <p>Code snippet:</p>
            <code>
                $xml = ...<br/>
                <br/>
                $doc = new DOMDocument('1.0');<br/>
                $doc-&gt;formatOutput = true;<br/>
                $domnode = dom_import_simplexml($xml);<br/>
                $domnode = $doc-&gt;importNode($domnode, true);<br/>
                $domnode = $doc-&gt;appendChild($domnode);<br/>
                // could add PI to bind to DTD<br/>
                $doc-&gt;save('blah.xml');                
            </code>
        </div>    
    </slide>

    

    <slide title="XML MODELS" layout="normal" tag="tag4">
        <p>It is possible to build an Xml_model like My_model or My_model2.</p>
        <ul>
            <li>IFF your XML structure has consistent immediate children off 
                the root, and</li>
            <li>IFF they can be uniquely identified, preferably through an 
                attribute, then</li>
            <li>You can build an associative array of these child SimpleXMLElements, 
                using the unique attribute as the array key</li>
        </ul>
        <p>CRUD becomes array lookup, and changes need to force rebuilding and rewriting the XML document</p>
        <p>You might consider this a really crude "ORM"?</p>
    </slide>


</lesson>
