<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 07 - XML Basics
-->
<lesson status="beta">
    <!-- Activity metadata ... override anything from the course or organizer -->

    <slide title="XML BASICS" layout="normal" >
        <p>X M L</p>
        <p>Stands for eXtensible Markup Language</p>
        <p>
            Used for storing object or data structure state.</p>
    </slide>

    <!-- Agenda -->
    <slide title="Agenda" layout="normal">
        <ol>
            <li>
                <a href="#{tag1}">What is XML?</a>
            </li>
            <li>
                <a href="#{tag2}">XML Structure</a>
            </li>
            <li>
                <a href="#{tag3}">Entities</a>
            </li>
            <li>
                <a href="#{tag4}">Attributes</a>
            </li>
            <li>
                <a href="#{tag5}">Design Strategies</a>
            </li>
        </ol>
    </slide>


    <!-- Normal slides -->

    <slide title="WHAT IS XML?" layout="normal" tag="tag1">
        <ul>
            <li>Way of digitally representing data structures</li>
            <li>Adds tags to text data so that it can be processed by 
                any application and is human-readable</li>
            <li>Application can understand data's meaning and how to process it</li>
            <li>Can be used to extend HTML, store object state, or even to 
                define new "languages"</li>
        </ul>
    </slide>

    <slide title="XML Documents" layout="normal" >
        <ul>
            <li>Documents are based on a logical tree structure
                <ul>
                    <li>Documents can be recursively broken down into elements</li>
                    <li>Elements can have attributes</li>
                </ul>
            </li>
            <li>Documents of the same "type" have the same structure</li>
            <li>Physically, a document can be broken up using entities - think  separation into files</li>
        </ul>
    </slide>

    <slide title="XML Markup" layout="normal" >
        <ul>
            <li>Represents the logical structure</li>
            <li>Connects/contains the physical entities</li>
            <li>An XML document is made up of markup and character data</li>
            <li>Markup processed by XML parser</li>
            <li>Character data passed on to application</li>
            <li>Markup is found between &lt; and &gt; just like HTML</li>
            <li>Reserved characters: &amp; and ; pair can also be significant</li>
        </ul>
    </slide>

    <slide title="An Example XML Document" layout="normal" >
        <code>
            &lt;shoes&gt;<br/>
  &#160;&#160;&lt;item uid="S121"&gt;<br/>
    &#160;&#160;&#160;&#160;&lt;manufacturer&gt;Nike&lt;/manufacturer&gt;<br/>
    &#160;&#160;&#160;&#160;&lt;model&gt;hightop&lt;/model&gt;<br/>
    &#160;&#160;&#160;&#160;&lt;designer&gt;Steve Nash&lt;/designer&gt;<br/>
    &#160;&#160;&#160;&#160;&lt;price&gt;125.00&lt;/price&gt;<br/>
    &#160;&#160;&#160;&#160;&lt;in-stock&gt;176&lt;/in-stock&gt;<br/>
  &#160;&#160;&lt;/item&gt;<br/>
&lt;/shoes&gt;
        </code>
    </slide>

    <slide title="XML Design Goals" layout="normal" >
        <ul>
            <li>Simple</li>
            <li>Human readable</li>
            <li>Platform neutral</li>
        </ul>
    </slide>

    <slide title="A More Complex Example" layout="normal" >
        <div class="left">
            <code>
&lt;?xml version="1.0"?&gt;<br/>
&lt;!DOCTYPE MEMO SYSTEM "memo.dtd"&gt;<br/>
&lt;memo&gt;<br/>
&lt;from&gt;<br/>
&#160;&#160;&lt;name&gt;Paul Prescod&lt;/name&gt;<br/>
&#160;&#160;&lt;email&gt;papresco@prescod.com&lt;/email&gt;<br/>
&lt;/from&gt;<br/>
&lt;to&gt;<br/>
&#160;&#160;&lt;name&gt;Charles GoldFarb&lt;/name&gt;<br/>
&#160;&#160;&lt;email&gt;charles@sgmlsource.com&lt;/email&gt;<br/>
&lt;/to&gt;<br/>
&lt;subject&gt;Another Memo Example&lt;/subject&gt;                
            </code>      
        </div>
        <div class="right">
            <code>
 &lt;body&gt;<br/>
&lt;paragraph&gt; Charles, I wanted to suggest that we <br/>
&lt;emphasis&gt;not&lt;/emphasis&gt; use the typical memo <br/>
                example in our book.  Memos tend to be used <br/>
                anywhere a small, simple document type is needed, <br/>
                but they are just &lt;emphasis&gt;so&lt;/emphasis&gt; boring!<br/>
&lt;/paragraph&gt;<br/>
&lt;/body&gt;<br/>
&lt;/memo&gt;               
            </code>
        </div>
    </slide>

    <slide title="XML STRUCTURE" layout="normal" tag="tag2">
        <p>There are three ways to look at the structure of an XML document:</p>
        <ul>
            <li>Tree structure, conceptually</li>
            <li>Text document</li>
            <li>DOM</li>
        </ul>
        <p>These all have to do with different ways of thinking about the 
            pieces of an XML document:</p>
        <ul>
            <li>directives (document type &amp; entities)</li>
            <li>elements (with attributes)</li>
        </ul>
    </slide>

    <slide title="Logical Structure" layout="normal" >
        <ul>
            <li>Tree structured hierarchy</li>
            <li>Every document has a single outermost element,
                called the "root" or "document" element</li>
            <li>Every element can contain from 0 to many nested elements,
                defined using particular XML tags</li>
            <li>Can be navigated in a predictable way</li>
        </ul>
    </slide>

    <slide title="Physical Structure" layout="normal" >
        <ul>
            <li>Character string</li>
            <li>Stored in 1 or more files</li>
            <li>XML document can be broken down physically into pieces of text 
                or sub strings</li>
        </ul>
    </slide>

    <slide title="Document Contents" layout="normal" >
        <ul>
            <li>XML signature (often forgiven)</li>
            <li>DOCTYPE directive (optional)<ul>
                    <li>Entity directives (optional)</li>
                </ul>
            </li>
            <li>Nested elements (at least one)<ul>
                    <li>Attributes for elements (optional)</li>
                    <li>Embedded entity references (optional)</li>
                </ul>
            </li>
        </ul>
    </slide>

    <slide title="Document Object Model" layout="normal" >
        <ul>
            <li>Tree structure, where each node …</li>
            <li>Has a text value (or can be empty)</li>
            <li>May have attributes</li>
            <li>May have child nodes</li>
        </ul>
        <p>There is a Javascript API for this.</p>
        <p>The W3C prescribes language-neutral API for interfaces</p>
    </slide>

    <slide title="DOM Visualization" layout="normal" >
        <p>A "3-d" visualization, <br/>where dots represent elements,
        blue shows text values, and red shows sets of attributes.</p>
        <br/>
        <img class="scale" width="640" height="400" src="/data/lessons/pix/7-1.png"/>
    </slide>


    <slide title="ENTITIES" layout="normal" tag="tag3">
        <ul>
            <li>An abbreviation or short form for some text</li>
            <li>Allow a document to be broken up into multiple storage objects or files (external)‏</li>
            <li>Allow substitution within a file (internal)‏</li>
            <li>An entity reference substitutes the entity text for the abbreviation</li>
        </ul>
    </slide>

    <slide title="Entity Declaration" layout="normal" >
        <ul>
            <li>Directives define them</li>
            <li>Abbreviation is entity name</li>
            <li>Long form is entity content<br/>
                <code>&lt;!ENTITY dtd "document type definition"&gt;</code>
            </li>
            <li>Can build symbolic constants using entity references<br/>
                <code>&lt;!ENTITY inverted-exclamation "&amp;#161;"&gt;</code>
            </li>
        </ul>
    </slide>

    <slide title="parsed Entities" layout="normal" >
        <ul>
            <li>If an entity contains XML that should be parsed by the 
                XML processor, it is called a parsed entity</li>
            <li>Simple example of parsed entity with markup:<br/>
                <code>&lt;!ENTITY dtd "&lt;term&gt;
                    document type definition&lt;/term&gt;"&gt;</code>
            </li>
            <li>This is also an example of an internal entity</li>
        </ul>
    </slide>

    <slide title="External Entities" layout="normal" >
        <ul>
            <li>Content of entity can come from another file...<br/>
                <code>&lt;!ENTITY intro-chapter SYSTEM 
                    "http://www.megacorp.com/intro.xml"&gt;</code>
            </li>
            <li>Keyword "SYSTEM" lets processor know that the next thing 
                in the declaration is a URI</li>
            <li>Content of the entity comes from URI </li>
        </ul>
    </slide>

    <slide title="Entity Reference" layout="normal" >
        <div class="left">
            <ul>
                <li>A document will use an entity through an entity reference</li>
                <li>&amp; and ; combination is used, around the name of the entity
                    to substitute</li>
                <li>The reference will be replaced by the entity contents</li>
            </ul>
        </div>
        <div class="right">
            <code>
                &lt;!DOCTYPE MAGAZINE[<br/>
&lt;!ENTITY title "Painters Quarterly"&gt;<br/>
                ]&gt;<br/>
&lt;MAGAZINE&gt;<br/>
&lt;TITLE&gt;&amp;title;&lt;/TITLE&gt;<br/>
&lt;p&gt;Welcome to the first issue of &amp;title;. <br/>
&amp;title; is targeted at the amateur painter.&lt;/p&gt;<br/>
&lt;/MAGAZINE&gt;
            </code>
        </div>
    </slide>

    <slide title="Unparsed External Entities" layout="normal" >
        <div class="left">
            <ul>
                <li>Used for data such as images </li>
                <li>Application does not expect the XML processor to parse this data</li>
                <li>NDATA indicates that this is an unparsed entity</li>
                <li>GIF Indicates type of data</li>
            </ul>
        </div>
        <div class="right">
            <code>
&lt;!ENTITY picture SYSTEM <br/> 
&#160;&#160;"http://www.home.org/mydog.gif" <br/>
&#160;&#160;NDATA GIF&gt;            
            </code>
        </div>
    </slide>

    <slide title="ATTRIBUTES" layout="normal" tag="tag4">
        <ul>
            <li>An attribute is a name followed by an equal sign then an attribute value</li>
            <li>Allows an author to attach extra information to the elements in a document</li>
            <li>An attribute value can be any characters except the ones that start markup</li>
            <li>Used to store information about a tag</li>
            <li>Used for values that are unique to element as a whole and unlikely to change (see example)</li>
        </ul>
    </slide>

    <slide title="Attributes vs Elements" layout="normal" >
        <ul>
            <li>Attributes cannot contain elements or sub-attributes</li>
            <li>Specified once and in any order</li>
            <li>Elements must occur in order specified and may be specified more than once</li>
            <li>Attributes are properties, elements are parts</li>
        </ul>
    </slide>

    <slide title="Structure and Use" layout="normal" >
        <ul>
            <li>Text strings with no explicit structure</li>
            <li>Or simple lists of strings</li>
            <li>Different elements can have attributes with the same name;
                you should have same semantics</li>
            <li>Attributes are considered immutable … second or subsequent attribute settings are ignored</li>
        </ul>
    </slide>

    <slide title="Attribute Types" layout="normal" >
        <ul>
            <li>Attribute types enforce lexical and semantic constraints</li>
            <li>Simplest type is the <code>StringType</code> which is made up 
            of character data, <code>CDATA</code> </li>
            <li>Any string of characters</li>
            <li>Tokenized types:<ul>
                    <li>Name token or tokens</li>
                    <li>ID and IDREF - used for cross referencing</li>
                    <li>Entity - can refer to external unparsed entities like graphics file</li>
                </ul>
            </li>
        </ul>
    </slide>

    <slide title="Attribute Example" layout="normal" >
        <code>
&lt;customer cust_id="12345"&gt;<br/>
&#160;&#160;&lt;name salute="Mr" nickname="Bobby"&gt;Smith, Robert&lt;/name&gt;<br/>
&#160;&#160;&lt;title&gt;Manager&lt;/title&gt;<br/>
&#160;&#160;&lt;company&gt;My Company Inc.&lt;/company&gt;<br/>
&lt;/customer&gt;            
        </code>    
    </slide>

    <slide title="XML STRATEGIES" layout="normal" tag="tag5">
        <ul>
            <li>Goals to shoot for:<ul>
                    <li>Logical or intuitive</li>
                    <li>Constrainable</li>
                    <li>Easy to process</li>
                </ul>
            </li>
            <li>Bad things?<br/>
                Nothing is right for all uses</li>
            <li>Strategies<ul>
                    <li>Element centric</li>
                    <li>Attribute centric</li>
                    <li>Combination</li>
                </ul>
            </li>
        </ul>
    </slide>

</lesson>
