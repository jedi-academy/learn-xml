<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 02 - MVC Framework Introduction
-->
<lesson status="beta">
    <!-- Activity metadata ... override anything from the course or organizer -->

    <!-- Agenda -->
    <slide title="Agenda" layout="normal">
        <ol>
            <li>
                <a href="#{tag1}">Frameworks</a>
            </li>
            <li>
                <a href="#{tag2}">Models</a>
            </li>
            <li>
                <a href="#{tag3}">Controllers</a>
            </li>
            <li>
                <a href="#{tag4}">Views</a>
            </li>
            <li>
                <a href="#{tag5}">Support Components</a>
            </li>
            <li>
                <a href="#{tag6}">Your CI Webapp!</a>
            </li>
        </ol>
    </slide>


    <!-- Normal slides -->

    <slide title="Setup" layout="normal">
        <h1>Setup</h1>
        <p>This lesson mentions source code files from
            the <a href="https://github.com/comp4711/example-contacts" target="_blank">
                Example Contacts
            </a> demo webapp. Please download that project first, and extract
            it locally, so that you can refer to the source files during the lesson.
        </p>
    </slide>

    <slide title="Frameworks" layout="normal" tag="tag1">
        <h1>Frameworks</h1>
        <p>An MVC framework is one with conventions
            and pre-built components that encourage or enforce
            good programming practices.</p>
        <p>CodeIgniter is one such framework.</p>
        <p>Others include CakePHP, Fat-Free, FuelPHP, Kohana, Laravel, Symfony2, Yii and Zend</p>
    </slide>

    <slide title="Design Pattern Driven!" layout="normal">
        <div class="left">
            <p>Model-View-Controller is a design pattern.</p>
            <p>It is an "industry-accepted best practice",
                that says that it is good to keep separate concerns
                apart from each other.</p>
            <p>CodeIgniter has base classes for models and controllers,
                and it has components to build presentation content
                separate from these. This is not conventional PHP scripting!</p>
        </div>
        <div class="right">
            <p>A typical MVC framework incorporates many other 
                <a href="http://en.wikipedia.org/wiki/Software_design_pattern" target="_blank">
                    design patterns</a>:</p>
            <ul>
                <li>DAO (DB access)</li>
                <li>Business delegate (framework itself)</li>
                <li>Session facade (session library)</li>
                <li>Front controller (index.php)</li>
                <li>Intercepting filter (hooks)</li>
                <li>Active record (model)</li>
            </ul>

        </div>
    </slide>

    <slide title="Categorizing MVC Frameworks" layout="normal">
        <p>Frameworks come in all sizes.</p>
        <p>They differ in philosophy, scope, management tools
        &amp; included plugins.</p>
        <table style="width:90%; font-size:80%;text-align:left">
            <thead>
                <tr>
                    <th>Category</th>
                    <th>Adds</th>
                    <th>Size</th>
                    <th>Example</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="width:20%">Micro</td>
                    <td style="width:40%">MVC, plugins, routing, instance</td>
                    <td style="width:20%">0.3MB</td>
                    <td style="width:20%">Fat-Free</td>
                </tr>
                <tr>
                    <td>Lean</td>
                    <td>Config, templates</td>
                    <td>2MB</td>
                    <td>CodeIgniter</td>
                </tr>
                <tr>
                    <td>Normal</td>
                    <td>Scaffolding, auth, ORM, CLI, IDE plugin</td>
                    <td>10MB</td>
                    <td>CakePHP</td>
                </tr>
                <tr>
                    <td>Enterprise</td>
                    <td>Engines (templating, ORM), included plugins, installer, starter, generators</td>
                    <td>24MB+</td>
                    <td>Symfony2</td>
                </tr>
            </tbody>
        </table>
    </slide>

    <slide title="Project Files" layout="normal">
        <div class="left">
            <p>A CodeIgniter project contains application logic and 
                support files.</p>
            <p>"index.php", in the document root, *is* the
                front controller, i.e. entry point.</p>
            <p>".htaccess" is an Apache configuration file, to
                eliminate the need to explicitly have "index.php" in
                URLs.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="270" height="256" src="/data/lessons/pix/2-2.png"/>
        </div>
    </slide>

    <slide title="Folder Structures" layout="normal">
        <p>Other frameworks follow similar conventions.</p>
        <div class="left">
            <p>
                <i>Fat-Free</i>
            </p>
            <img class="scale" width="358" height="315" src="/data/lessons/pix/2-4.png"/>
        </div>
        <div class="right">
            <p>
                <i>FuelPHP</i>
            </p>
            <img class="scale" width="256" height="576" src="/data/lessons/pix/2-5.jpg"/>
        </div>
    </slide>

    <slide title="Class Loader" layout="normal">
        <p>CodeIgniter has its own class loader.</p>
        <p>It uses the folder structure to locate classes (per MVC)</p>
        <pre>
            <code>
                $this->load->model('customers');
                $this->customers->get(...);
            </code>
        </pre>
        <p>It enforces naming conventions too.</p>
    </slide>

    <slide title="Routing" layout="normal">
        <p>CodeIgniter normally routes requests to controllers by
            convention, i.e. using the URI segment and looking in the controllers
            folder.Other frameworks often handle routing a bit differently.</p>
        <div class="left">
            <i>Kohana</i>
            <pre>
                <code>
                    Route::set(‘default’, 
                    ‘(&lt;controller&gt;(/&lt;action&gt;(/&lt;id&gt;)))’)
                        ->defaults(array(
                    ‘controller’ =&gt; ‘welcome’, 
                    ‘action’=&gt;‘index’, ))
                </code>
            </pre>
        </div>
        <div class="right">
            <i>Laravel</i>
            <pre>
                <code>
                    //Basic POST Route
                    Route::post(‘/’, function()
                    {
                         	return ‘example content’;
                    });
                </code>
            </pre>
        </div>
        <p>The double-colon above denotes referencing a (static) method inside a class.</p>
    </slide>

    <slide title="Models" layout="normal" tag="tag2">
        <div class="left">
            <p>Models encapsulate data sources or entities.</p>
            <p>Each model is a class that wraps a data source.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="279" height="386" src="/data/lessons/pix/2-6.png"/>
        </div>
    </slide>

    <slide title="Active Record" layout="normal">
        <div class="left">
            <p>CodeIgniter encourages the Active Record design
                pattern which says you build CRUD methods into models.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="267" height="176" src="/data/lessons/pix/2-7.png"/>
        </div>
    </slide>

    <slide title="Query Builder" layout="normal">
        <div class="left">
            <p>CodeIgniter comes with a QueryBuilder library,
                to make it easier to access your databases.</p>
        </div>
        <div class="right">
            <pre>
                <code>
                    $this-&gt;db-&gt;select('*')-&gt;from('my_table')
                    -&gt;group_start()
                    -&gt;where('a', 'a')
                    -&gt;or_group_start()
                    -&gt;where('b', 'b')
                    -&gt;where('c', 'c')
                    -&gt;group_end()
                    -&gt;group_end()
                    -&gt;where('d', 'd')
                    -&gt;get();                
                </code>
            </pre>
        </div>
    </slide>

    <slide title="Model Classes" layout="normal">
        <div class="left">
            <p>In CodeIgniter, models are classes that extend CI_Model.</p>
            <p>Each data source, eg. RDB table, has its own model.</p>
        </div>
        <div class="right">
            <pre>
                <code>
                    public class Orders extends CI_Model {
                    public function add_item($code, $quantity) {...}
                    public function calc_total() {...}
                    }
                </code>
            </pre>
        </div>
    </slide>

    <slide title="Model Methods" layout="normal">
        <p>CRUD</p>
        <p>Some business logic</p>
        <p>Work with objects or associative arrays</p>
        <p>* not * beans, i.e. entity models</p>
        <p>Do not generate views, but generate or provide data
            to be passed to views</p>
        <p>Usage: $this->load->model('goodies');</p>
    </slide>

    <slide title="Base Model" layout="normal">
        <p>You can provide your own base model, MY_Model, with
            common methods. See core/MY_Model in the example webapp.
            The application/core folder holds any classes you make that
            build on those built into the framework, and you can configure the prefix (MY_)
            that you use.</p>
        <p>This could be used to provide a simple object-relational map.</p>
        <p>Sample properties: $_tableName, $_keyField</p>
        <p>Sample methods: create() get($key), add($record), 
            update($record), delete($key), exists($key)</p>
    </slide>

    <slide title="Other Model Examples" layout="normal">
        <p>Other frameworks have similar functionality.</p>
        <div class="left">
            <i>Fat-Free</i>
            <pre>
                <code>
                    $db = new DB\SQL('mysql:host=localhost';
                    port=3306;dbname=mystuff',
                    'myuserid','mypassword');
                    $user = new DB\SQL\Mapper($db,'users');
                    $user-&gt;load('id=1');
                    $user-&gt;name='Pointy haired boss';
                    $user-&gt;save();                 
                </code>
            </pre>
        </div>
        <div class="right">
            <i>CakePHP</i>
            <pre>
                <code>
                    App::uses(’AppModel’, ’Model’);
                    class Ingredient extends AppModel {
                    public $name = ’Ingredient’;
                    }                
                </code>
            </pre>
        </div>
    
    </slide>

    <slide title="Controllers" layout="normal" tag="tag3">
        <div class="left">
            <p>Controllers handle incoming requests.</p>
            <p>A Controller serves as an intermediary between the Model, 
                the View, and any other resources needed to process an 
                HTTP request and generate a web page.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="225" height="148" src="/data/lessons/pix/2-8.png"/>
        </div>
    </slide>

    <slide title="CI Controllers" layout="normal">
        <div class="left">
            <p>In CI, controllers are classes that extend CI_Controller or your base controller</p>
            <p>Our base controller implements view templating, through render()</p>
            <p>See application/core/MY_Controller.php</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="240" height="174" src="/data/lessons/pix/2-9.png"/>
        </div>
    </slide>

    <slide title="App Controllers" layout="normal">
        <p>Each of your webapp controllers builds on your base controller</p>
        <p>Normally, each usecase has its own controller</p>
        <p>Additionally, controllers or subcontrollers are used for services</p>
        <p>See application/controllers/Welcome.php</p>
    </slide>

    <slide title="Controller Methods" layout="normal">
        <p>URLs are segment based, with the pattern "example.com/class/function/parm1/parm2"</p>
        <p>The index() method is the default handler function, while other public
            methods are treated as sub-controllers</p>
        <p>Parameters are passed positionally.</p>
        <p>An example: given the URI "/products/shoes/sandals/123", the segments could
        be interpreted as the controller (Products), method inside it (shoes), and
        then two parameters passed to that method (sandals and 123).</p>
        <p>Confusion is possible ...
            application/controllers/business/work
        refers to the Work controller inside the business subfolder
        with the controllers!</p>
    </slide>

    <slide title="Example Base Controller" layout="normal">
        <p>core/MY_Controller.php</p>
        <pre>
            <code>
                class Application extends CI_Controller {
                // fields

                function __construct() {
                parent::__construct();
                // make sure we play the game nicely
                $this-&gt;load-&gt;helper('common');
                $this-&gt;load-&gt;helper('url');
                }

                function render() {...}
                }            
            </code>
        </pre>
    </slide>

    <slide title="Other Framework Examples" layout="normal">
        <div class="left">
            <i>FuelPHP</i>
            <pre>
                <code>
                    class Controller_Example extends Controller {

                    public function action_index() {
                    $data['css'] = Asset::css(array
                    ('reset.css','960.css','main.css'));
                    return Response::forge(View::forge('welcome/index'));
                    }
                    }
                </code>
            </pre>
        </div>
        <div class="right">
            <i>Laravel</i>
            <pre>
                <code>
                    class Controller extends BaseController {
                    public function home() {
                            return View::make(‘home’);
                    }
                    }                
                    ...                
                    Route::get(‘/’, ‘Controller@home’)                
                </code>
            </pre>
        </div>
    
    </slide>
    
    <slide title="Views" layout="normal" tag="tag4">
        <div class="left">
            <p>Views are the components that deal with presentation,
                typically for a web browser.</p>
            <p>Views generate the information presented to a user, 
                for instance a web page.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="234" height="336" src="/data/lessons/pix/2-10.png"/>
        </div>
    </slide>

    <slide title="View Templates" layout="normal">
        <p>A normal practice is to build a view template, 
            which wraps the "real" webpage body, whose name is 
            passed as a parameter; this is managed by the base controller</p>
        <p>Such a template is meant to provide a consistent layout across
            a number (perhaps all) of pages in your webapp, with
            placeholders for the pieces appropriate to a given page.</p>
        <p>CI has a template parser built-in, which lets us 
            eliminate most PHP script from a view.</p>
        <p>See application/views/_template.php</p>
    </slide>

    <slide title="View Fragments" layout="normal">
        <p>Each of your view fragments is stored in its own file, 
            using the substitution fields for passed parameters.</p>
        <p>A view fragment provides a portion or piece of a complete
            page. It is typically well-formed - a complete &lt;div&gt;
            with any nested content.</p>
        <p>Substitution fields are enclosed in braces inside your view file.</p>
        <p>See application/views/homepage.php</p>
    </slide>

    <slide title="View Usage" layout="normal">
        <p>Javascript libraries are not well-supported in CI; 
            you can use them, but effectively client-side</p>
        <p>Do use CSS to control the appearance</p>
        <p>Usage: $this-&gt;load-&gt;view('showoff',$data); or 
            $this-&gt;parser-&gt;load('showoff',$data);</p>;
        <p>Spoiler: JS/CSS integration coming  :)</p>
    </slide>

    <slide title="View Examples From Other Frameworks" layout="normal">
        <p>Other frameworks have similar functionality.</p>
        <div class="left">
            <i>Fat-Free</i>
            <pre>
                <code>
                    $f3-&gt;set('name','Jim');
                    $f3-&gt;set('title','Sir');
                    ...
                    $view = new Template;
                    echo $view-&gt;render('template.html');

                    where the HTML fragment includes
                    ... &lt;p&gt;Hello {{ @title }} {{ @name }}&lt;/p&gt;
                </code>
            </pre>
        </div>
        <div class="right">
            <i>FuelPHP</i>
            <pre>
                <code>
                    fuel/app/views/layout.php ...
&lt;html&gt;
    &lt;head&gt;
        &lt;?php echo $head; ?&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;?php echo $header; ?&gt;
        &lt;?php echo $content; ?&gt;
        &lt;?php echo $footer; ?&gt;
    &lt;/body&gt;
&lt;/html&gt;
                </code>
            </pre>
        </div>
    </slide>
    
    <slide title="View Methods" layout="normal">
        <p>Seriously?</p>
        <p>If you need functionality, use helpers</p>
    </slide>

    <slide title="Support Components" layout="normal" tag="tag5">
        <h1>Support Components</h1>
        <p>An MVC framework comes with a number of pre-built 
            classes or scripts to make your webapp development
            easier and more consistent.</p>
        <p>These are collectively referred to as support components</p>
    </slide>

    <slide title="Libraries" layout="normal" >
        <div class="left">
            <p>Any classes that you would like to use can be put into 
                the application/libraries folder</p>
            <p>Usage: $this-&gt;load-&gt;library('whatever');</p>
            <p>Examples: third party classes, bean-like classes?</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="264" height="600" src="/data/lessons/pix/2-11.png"/>
        </div>
    </slide>

    <slide title="Example Library: Product" layout="normal">
        <p>libraries/Product.php</p>
        <p>Use for object model for entities stored in an XML 
            document or RDB table</p>
        <p>"models/products" would be the aggregation of these</p>
        <p>Again, just one way to do this</p>
    </slide>

    <slide title="Libraries in Other Frameworks" layout="normal" >
        <div class="left">
            <p>Laravel</p>
            <ul>
                <li>Auth</li>
                <li>Validation</li>
                <li>Pagination</li>
                <li>Database</li>
            </ul>
        </div>
        <div class="right">
            <p>Symfony2</p>
            <ul>
                <li>Browserkit</li>
                <li>Config</li>
                <li>DomCrawler</li>
                <li>Finder</li>
                <li>OptionsResolver</li>
                <li>...</li>
            </ul>
        </div>
    </slide>

    <slide title="Helpers" layout="normal" >
        <div class="left">
            <p>Put commonly used functions inside a "helper" script</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="255" height="246" src="/data/lessons/pix/2-12.png"/>
        </div>
    </slide>

    <slide title="Helpers are &quot;Classic&quot;" layout="normal" >
        <div class="left">
            <p>Functions in any such loaded helpers are available everywhere</p>
            <p>Usage: $this-&gt;load-&gt;helper('common');</p>
            <p>See application/helpers/common_helper.php</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="336" height="592" src="/data/lessons/pix/2-13.png"/>
        </div>
    </slide>

    <slide title="Example Helper: common_helper" layout="normal" >
        <p>Form field handling, using associative array as data 
            transfer object/buffer</p>
        <p>fieldExtract($source,$target,$fields)<br/>
            -$source – assoc array from form<br/>
            -$target – corresponding object<br/>
            -$fields – names of fields in this form</p>
        <p>fieldInject($source,$target,$fields)<br/>
            -$source – original data object<br/>
            -$target – assoc array for parameters to view<br/>
            -$fields – names of fields in this form</p>
    </slide>

    <slide title="Utilities Examples" layout="normal" >
        <p>Many frameworks come with bundled utilities.</p>
        <div class="left">
            <i>Yii</i>
            <br/>
            <img class="scale" width="337" height="268" src="/data/lessons/pix/2-15.png"/>
        </div>
        <div class="right">
            <i>FuelPHP</i>
            <p>
                <pre>
                    <code>
                        $ php oil g scaffold monkey name:string description:text

                        Created model: APPPATH/classes/model/monkey.php
                        Created migration: APPPATH/migrations/003_create_monkeys.php
                        Created controller: APPPATH/classes/controller/monkeys.php
                        Created view: APPPATH/views/monkeys/index.php
                        Created view: APPPATH/views/monkeys/view.php
                        Created view: APPPATH/views/monkeys/create.php
                        Created view: APPPATH/views/monkeys/edit.php
                        Created view: APPPATH/views/monkeys/_form.php                    
                    </code>
                </pre>
            </p>
        </div>
    </slide>

    <slide title="Configuration" layout="normal" >
        <div class="left">
            <p>CodeIgniter provides a "config" folder to 
                let you customize your web app</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="234" height="334" src="/data/lessons/pix/2-14.png"/>
        </div>
    </slide>

    <slide title="Configuration Practices" layout="normal">
        <p>index.php points to your system folder</p>
        <p>application/config/ contains...</p>
        <ul>
            <li>autoload – specify components to pre-load </li>
            <li>config – specify application parameters</li>
            <li>database – specify RDB parameters</li>
            <li>routes – specify default controller</li>
        </ul>
    </slide>

    <slide title="Configuration Examples From Other Frameworks" layout="normal" >
        <div class="left">
            <i>Laravel</i>
            <pre>
                <code>
                    composer create-project laravel/laravel project_name --prefer-dist
                    Composer.json:
                    "require": {
                    "laravel/framework": "4.1.*",
                    "intervention/image": "1.*"
                    }

                    Composer update
                </code>
            </pre>
        </div>
        <div class="right">
            <i>Kohana</i>
            <pre>
                <code>
                    Kohana::modules(array(
                       'auth'   	=&gt; MODPATH.'auth',   	// Basic authentication
                       'cache'  	=&gt; MODPATH.'cache',  	// Caching with multiple backends
                       'codebench'  =&gt; MODPATH.'codebench',  // Benchmarking tool
                       'database'   =&gt; MODPATH.'database',   // Database access
                       'image'  	=&gt; MODPATH.'image',  	// Image manipulation
                       'orm'    	=&gt; MODPATH.'orm',    	// Object Relationship Mapping
                       'oauth'  	=&gt; MODPATH.'oauth',  	// OAuth authentication
                       'pagination' =&gt; MODPATH.'pagination', // Paging of results
                       'unittest'   =&gt; MODPATH.'unittest',   // Unit testing
                       'userguide'  =&gt; MODPATH.'userguide',  // User guide and API documentation
                       ));
                </code>
            </pre>
        </div>
    </slide>

    <slide title="Your CodeIgniter Webapp!" layout="normal" tag="tag6">
        <h1>Your CodeIgniter Webapp!</h1>
        <p>This is a simplified look at where stuff goes inside
            your webapp, and the general steps you would follow
            to build a simple CodeIgniter webapp.</p>
            <p>The six slides that follow are *not* the tutorial,
            but a summary of the tutorial set that you will
            follow to convert a static website into a
            CodeIgniter webapp!</p>
    </slide>

    <slide title="Your Folder Structure" layout="normal">
        <p>CI system → /xampp/htdocs/system3</p>
        <p>CI user guide → desktop?</p>
        <p>CI starter → copy to /xampp/htdocs and tailor for a new webapp</p>
        <p>NOTE: the starter project differs from the official CI download 
            in several ways: 
            base controller with templating,
            simple "ORM" model,
            standard config for Apache</p>
    </slide>

    <slide title="Setup Your Webapp" layout="normal">
        <p>Copy/extract the starter to a folder in htdocs</p>
        <p>Open it with NB &amp; rename (proj &amp; folder)</p>
        <p>Ensure virtual host mapping</p>
        <p>Modify NB project run config?</p>
        <p>Create RDB if needed</p>
    </slide>

    <slide title="Configure Your Webapp" layout="normal">
        <p>config/constants.php – adjust as needed</p>
        <p>config/config.php – define menu navbar</p>
    </slide>

    <slide title="Setup Your View Template" layout="normal">
        <p>Make or visualize a wireframe model for the website.</p>
        <p>Tailor views/_template.php to match it</p>
        <p>This template contains only the common page elements for the site, 
            with substitutable fields for the menu and content.</p>
    </slide>

    <slide title="Tailor Your Webapp" layout="normal">
        <p>controllers/?.php – controller per navbar item, 
            bound to corresponding view</p>
        <p>models/?.php – model per RDB table</p>
        <p>views/welcome.php – tailor your homepage</p>
        <p>views/?.php – view per controller</p>
    </slide>

    <slide title="Manage Your Assets" layout="normal">
        <p>assets/css/style.css – your CSS</p>
        <p>assets/images/ - your webapp images</p>
        <p>assets/css/ - any imported CSS frameworks</p>
        <p>assets/js/ - any imported JS frameworks</p>
    </slide>


</lesson>
